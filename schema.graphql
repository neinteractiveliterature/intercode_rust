type Ability {
	can_manage_conventions: Boolean!
	can_read_schedule: Boolean!
	can_read_schedule_with_counts: Boolean!
	can_list_events: Boolean!
	can_read_user_con_profiles: Boolean!
	can_create_cms_files: Boolean!
	can_create_user_con_profiles: Boolean!
	can_become_user_con_profile(userConProfileId: ID!): Boolean!
	can_delete_user_con_profile(userConProfileId: ID!): Boolean!
	can_update_user_con_profile(userConProfileId: ID!): Boolean!
	can_withdraw_all_user_con_profile_signups(userConProfileId: ID!): Boolean!
	can_update_convention: Boolean!
	can_update_departments: Boolean!
	can_manage_email_routes: Boolean!
	can_update_event(eventId: ID!): Boolean!
	can_delete_event(eventId: ID!): Boolean! @deprecated(reason: "Deleting events is never allowed; this always returns false")
	can_override_maximum_event_provided_tickets: Boolean!
	can_update_event_categories: Boolean!
	can_read_event_proposals: Boolean!
	can_read_event_signups(eventId: ID!): Boolean!
	can_manage_runs: Boolean!
	can_manage_forms: Boolean!
	can_read_any_mailing_list: Boolean!
	can_update_notification_templates: Boolean!
	can_manage_oauth_applications: Boolean!
	can_read_reports: Boolean!
	can_manage_rooms: Boolean!
	can_manage_signups: Boolean!
	can_manage_any_cms_content: Boolean!
	can_manage_staff_positions: Boolean!
	can_read_orders: Boolean!
	can_manage_ticket_types: Boolean!
	can_read_user_activity_alerts: Boolean!
	can_read_organizations: Boolean!
	can_read_signups: Boolean!
	can_create_tickets: Boolean!
	can_delete_ticket(ticketId: ID!): Boolean!
	can_update_ticket(ticketId: ID!): Boolean!
	can_read_users: Boolean!
	can_force_confirm_signup(signupId: ID!): Boolean!
	can_update_bucket_signup(signupId: ID!): Boolean!
	can_update_counted_signup(signupId: ID!): Boolean!
}

"""
Despite the name, this actually represents an active_storage_blob model.  Whoops...
"""
type ActiveStorageAttachment {
	id: ID!
	byte_size: Int!
	content_type: String
	filename: String!
	resized_url(maxWidth: Int!, maxHeight: Int!): String
	url: String!
}


union CmsContent = Page | CmsPartial | CmsLayout

type CmsContentGroup {
	id: ID!
}

type CmsFile {
	id: ID!
	current_ability_can_delete: Boolean!
	file: ActiveStorageAttachment
}

type CmsGraphqlQuery {
	id: ID!
}

type CmsLayout {
	id: ID!
	content_html(path: String): String
	name: String
}

type CmsNavigationItem {
	id: ID!
	navigation_section: CmsNavigationItem
	page: Page
	position: Int
	title: String
}

"""
A CMS parent is a web site managed by Intercode. It acts as a container for CMS content, such
as pages, partials, files, layouts, variables, content groups, and user-defined GraphQL queries.

Most CMS parents are conventions, so their content will be convention-specific and scoped to
that convention's domain name. The exception to this is the root site, which is what Intercode
renders when there is no convention associated with the current domain name. (See the RootSite
object for more details about this.)
"""
interface CmsParent {
	id: ID!
	cmsContentGroups: [CmsContentGroup!]!
	cmsContentGroup(id: ID!): CmsContentGroup!
	cmsFiles: [CmsFile!]!
	cmsGraphqlQueries: [CmsGraphqlQuery!]!
	cmsLayouts: [CmsLayout!]!
	cmsNavigationItems: [CmsNavigationItem!]!
	cmsPages: [Page!]!
	cmsPage(id: ID, slug: String, rootPage: Boolean): Page!
	cmsPartials: [CmsPartial!]!
	cmsVariables: [CmsVariable!]!
	defaultLayout: CmsLayout!
	effectiveCmsLayout(path: String!): CmsLayout!
	fullTextSearch(query: String!): SearchResult!
	liquidAssigns: [LiquidAssign!]!
	previewMarkdown(markdown: String!, eventId: ID, eventProposalId: ID): String!
	previewLiquid(content: String!): String!
	rootPage: Page!
	typeaheadSearchCmsContent(name: String): [CmsContent!]!
}

type CmsPartial {
	id: ID!
}

type CmsVariable {
	id: ID!
}

type Convention implements CmsParent {
	id: ID!
	name: String
	accepting_proposals: Boolean!
	bio_eligible_user_con_profiles: [UserConProfile!]!
	canceled: Boolean!
	catch_all_staff_position: StaffPosition
	clickwrap_agreement: String
	domain: String!
	email_from: String!
	email_mode: String!
	ends_at: DateTime
	event_categories: [EventCategory!]!
	event_mailing_list_domain: String
	"""
	Finds an active event by ID in this convention. If there is no event with that ID in this
	convention, or the event is no longer active, errors out.
	"""
	event(id: ID!): Event!
	events(start: Date, finish: Date, include_dropped: Boolean, filters: EventFiltersInput): [Event!]!
	events_paginated(page: Int, per_page: Int, filters: EventFiltersInput, sort: [SortInput!]): EventsPagination!
	favicon: ActiveStorageAttachment
	hidden: Boolean!
	language: String!
	location: JSON
	maximum_event_signups: ScheduledValue
	maximum_tickets: Int
	my_profile: UserConProfile
	open_graph_image: ActiveStorageAttachment
	pre_schedule_content_html: String
	rooms: [Room!]!
	signup(id: ID!): Signup!
	signup_mode: SignupMode!
	signup_requests_open: Boolean!
	show_event_list: String!
	show_schedule: String!
	site_mode: SiteMode!
	staff_position(id: ID!): StaffPosition!
	staff_positions: [StaffPosition!]!
	starts_at: DateTime
	stripe_account: StripeAccount
	stripe_account_id: String
	stripe_account_ready_to_charge: Boolean!
	stripe_publishable_key: String
	ticket_mode: TicketMode!
	ticket_name: String!
	ticketNamePlural: String!
	ticket_types: [TicketType!]!
	tickets_available_for_purchase: Boolean!
	timezone_mode: TimezoneMode!
	timezone_name: String
	user_con_profile(id: ID!): UserConProfile!
	user_con_profile_form: Form!
	user_con_profiles_paginated(page: Int, per_page: Int, filters: UserConProfileFiltersInput, sort: [SortInput!]): UserConProfilesPagination!
	cmsContentGroups: [CmsContentGroup!]!
	cmsContentGroup(id: ID!): CmsContentGroup!
	cmsFiles: [CmsFile!]!
	cmsFile(id: ID!): CmsFile!
	cmsGraphqlQueries: [CmsGraphqlQuery!]!
	cmsGraphqlQuery(id: ID!): CmsGraphqlQuery!
	cmsLayouts: [CmsLayout!]!
	cmsLayout(id: ID!): CmsLayout!
	cmsNavigationItems: [CmsNavigationItem!]!
	cmsPages: [Page!]!
	cmsPage(id: ID, slug: String, rootPage: Boolean): Page!
	cmsPartials: [CmsPartial!]!
	cmsVariables: [CmsVariable!]!
	defaultLayout: CmsLayout!
	effectiveCmsLayout(path: String!): CmsLayout!
	rootPage: Page!
	typeaheadSearchCmsContent(name: String): [CmsContent!]!
}

type Coupon {
	id: ID!
	code: String!
	fixed_amount: Money
	percent_discount: Float
	provides_product: Product
}

type CouponApplication {
	id: ID!
	coupon: Coupon!
	discount: Money
}

scalar Date

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type Event {
	id: ID!
	author: String
	can_play_concurrently: Boolean!
	convention: Convention!
	created_at: NaiveDateTime
	email: String
	form: Form!
	event_category: EventCategory!
	images: [ActiveStorageAttachment!]!
	length_seconds: Int!
	maximum_event_provided_tickets_overrides: [MaximumEventProvidedTicketsOverride!]!
	my_rating: Int
	private_signup_list: Boolean!
	provided_tickets: [Ticket!]!
	registration_policy: RegistrationPolicy
	run(id: ID!): Run!
	runs(start: Date, finish: Date, exclude_conflicts: Date): [Run!]!
	short_blurb_html: String!
	status: String!
	team_members: [TeamMember!]!
	title: String!
	current_user_form_item_viewer_role: FormItemRole!
	current_user_form_item_writer_role: FormItemRole!
	form_response_attrs_json(itemIdentifiers: [String!]): Json!
	form_response_attrs_json_with_rendered_markdown(itemIdentifiers: [String!]): Json!
}

type EventCategory {
	id: ID!
	can_provide_tickets: Boolean!
	default_color: String!
	event_form: Form!
	event_proposal_form: Form
	full_color: String!
	name: String!
	scheduling_ui: String!
	signed_up_color: String!
	team_member_name: String!
	teamMemberNamePlural: String!
}

type EventConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EventEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Event!]!
}

"""
An edge in a connection.
"""
type EventEdge {
	"""
	A cursor for use in pagination
	"""
	cursor: String!
	"""
	The item at the end of the edge
	"""
	node: Event!
}

input EventFiltersInput {
	category: [Int]
	title: String
	title_prefix: String
	my_rating: [Int!]
	form_items: Json
}

type EventsPagination {
	current_page: Int!
	entries: [Event!]!
	per_page: Int!
	total_entries: Int!
	total_pages: Int!
}


type Form {
	id: ID!
	form_sections: [FormSection!]!
	form_type: String!
	title: String
}

type FormItem {
	id: ID!
	admin_description: String
	default_value: String
	expose_in: [String!]
	identifier: String
	item_type: String
	position: Int!
	public_description: String
	rendered_properties: String
	visibility: FormItemRole!
	writeability: FormItemRole!
}

enum FormItemRole {
	normal
	confirmed_attendee
	team_member
	all_profiles_basic_access
	admin
}

type FormSection {
	id: ID!
	form_items: [FormItem!]!
	position: Int!
	title: String
}



"""
A scalar that can represent any JSON value.
"""
scalar JSON

scalar Json

type LiquidAssign {
	name: String!
	drop_class_name: String!
	cms_variable_value: JSON
}

type MaximumEventProvidedTicketsOverride {
	id: ID!
	override_value: Int
	ticket_type: TicketType!
}

type Money {
	currency_code: String!
	fractional: Int!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

type Order {
	id: ID!
	charge_id: String
	coupon_applications: [CouponApplication!]!
	order_entries: [OrderEntry!]!
	payment_amount: Money
	payment_note: String
	status: String!
	submitted_at: NaiveDateTime
	total_price: Money!
	user_con_profile: UserConProfile!
}

type OrderEntry {
	id: ID!
	describe_products: String!
	order: Order!
	price_per_item: Money
	product: Product!
	product_variant: ProductVariant
	quantity: Int
}

type Page {
	id: ID!
	content_html: String!
	current_ability_can_delete: Boolean!
	current_ability_can_update: Boolean!
	name: String
	skip_clickwrap_agreement: Boolean!
	slug: String
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type PayWhatYouWantValue {
	minimum_amount: Money
	suggested_amount: Money
	maximum_amount: Money
}

enum PricingStrategy {
	"""
	Fixed price
	"""
	fixed
	"""
	Price that changes over time
	"""
	scheduled_value
	"""
	Pay-what-you-want price
	"""
	pay_what_you_want
}

type PricingStructure {
	price(time: DateTime): Money
	pricing_strategy: PricingStrategy!
	value: PricingStructureValue!
}

union PricingStructureValue = Money | ScheduledMoneyValue | PayWhatYouWantValue

type Product {
	id: ID!
	available: Boolean!
	description: String
	description_html: String!
	image: ActiveStorageAttachment
	name: String
	payment_options: Json
	pricing_structure: PricingStructure!
	product_variants: [ProductVariant!]!
	provides_ticket_type: TicketType
}

type ProductVariant {
	id: ID!
	description: String
	image: ActiveStorageAttachment
	name: String
	override_pricing_structure: PricingStructure
	position: Int
}

type Query {
	assumedIdentityFromProfile: UserConProfile
	cmsParentByRequestHost: CmsParent!
	conventionByRequestHost: Convention!
	conventionByRequestHostIfPresent: Convention
	currentAbility: Ability!
	currentUser: User
	events(after: String, before: String, first: Int, last: Int): EventConnection!
	hasOauthApplications: Boolean!
	previewLiquid(content: String!): String!
	rootSite: RootSite!
}

type RegistrationPolicy {
	buckets: [RegistrationPolicyBucket!]!
	minimum_slots: Int
	minimum_slots_including_not_counted: Int
	only_uncounted: Boolean!
	preferred_slots: Int
	preferred_slots_including_not_counted: Int
	prevent_no_preference_signups: Boolean!
	slots_limited: Boolean!
	total_slots: Int
	total_slots_including_not_counted: Int
}

type RegistrationPolicyBucket {
	key: String!
	anything: Boolean!
	description: String!
	expose_attendees: Boolean!
	minimum_slots: Int
	name: String!
	not_counted: Boolean!
	slots_limited: Boolean!
	total_slots: Int
}

type Room {
	id: ID!
	name: String
	runs: [Run!]!
}

type RootSite implements CmsParent {
	id: ID!
	site_name: String
	cmsContentGroups: [CmsContentGroup!]!
	cmsContentGroup(id: ID!): CmsContentGroup!
	cmsFiles: [CmsFile!]!
	cmsFile(id: ID!): CmsFile!
	cmsGraphqlQueries: [CmsGraphqlQuery!]!
	cmsGraphqlQuery(id: ID!): CmsGraphqlQuery!
	cmsLayouts: [CmsLayout!]!
	cmsLayout(id: ID!): CmsLayout!
	cmsNavigationItems: [CmsNavigationItem!]!
	cmsPages: [Page!]!
	cmsPage(id: ID, slug: String, rootPage: Boolean): Page!
	cmsPartials: [CmsPartial!]!
	cmsVariables: [CmsVariable!]!
	defaultLayout: CmsLayout!
	effectiveCmsLayout(path: String!): CmsLayout!
	rootPage: Page!
	typeaheadSearchCmsContent(name: String): [CmsContent!]!
	url: String!
}

type Run {
	id: ID!
	confirmed_signup_count: Int!
	current_ability_can_signup_summary_run: Boolean!
	ends_at: NaiveDateTime
	event: Event!
	my_signups: [Signup!]!
	my_signup_requests: [SignupRequest!]!
	not_counted_signup_count: Int!
	room_names: [String]!
	rooms: [Room!]!
	schedule_note: String
	signup_count_by_state_and_bucket_key_and_counted: Json!
	signups_paginated(page: Int, per_page: Int, filters: SignupFiltersInput, sort: [SortInput!]): SignupsPagination!
	starts_at: NaiveDateTime
	title_suffix: String
}

type ScheduledMoneyValue {
	timespans: [TimespanWithMoneyValue!]!
}

type ScheduledValue {
	timespans: [TimespanWithValue!]!
}

type SearchResult {
	totalEntries: Int!
}

type Signup {
	id: ID!
	age_restrictions_check: String!
	bucket_key: String
	counted: Boolean!
	requested_bucket_key: String
	run: Run!
	state: SignupState!
	user_con_profile: UserConProfile!
	waitlist_position: Int
}

input SignupFiltersInput {
	name: String
	event_title: String
	bucket: [String!]
	email: String
	state: [String!]
}

enum SignupMode {
	"""
	Attendees can sign themselves up for events
	"""
	self_service
	"""
	Attendees can request signups and signup changes but con staff must approve them
	"""
	moderated
}

type SignupRequest {
	id: ID!
	replace_signup: Signup
	result_signup: Signup
	requested_bucket_key: String
	state: String!
	target_run: Run!
}

enum SignupState {
	"""
	Attendee's spot is held temporarily while the attendee finishes paying for their ticket
	"""
	ticket_purchase_hold
	"""
	Attendee's spot is confirmed
	"""
	confirmed
	"""
	Attendee is on the waitlist for this event and may be pulled in automatically
	"""
	waitlisted
	"""
	Attendee has withdrawn from this event (and this signup is no longer valid)
	"""
	withdrawn
}

type SignupsPagination {
	current_page: Int!
	entries: [Signup!]!
	per_page: Int!
	total_entries: Int!
	total_pages: Int!
}

enum SiteMode {
	"""
	Site behaves as a convention with multiple events
	"""
	convention
	"""
	Site behaves as a single standalone event
	"""
	single_event
	"""
	Site behaves as a series of standalone events
	"""
	event_series
}

"""
A description of a field to sort a result set by. This is typically used in pagination
fields to specify how the results should be ordered.
"""
input SortInput {
	"""
	The name of the field to sort by.
	"""
	field: String!
	"""
	If true, the field will be sorted in descending order. If false, it will be sorted in
	ascending order.
	"""
	desc: Boolean!
}

type StaffPosition {
	id: ID!
	name: String
}


type StripeAccount {
	id: ID!
	charges_enabled: Boolean
	display_name: String
	email: String
}

type TeamMember {
	id: ID!
	display_team_member: Boolean!
	email: String
	event: Event!
	receive_con_email: Boolean!
	receive_signup_email: String!
	show_email: Boolean!
	user_con_profile: UserConProfile!
}

type Ticket {
	id: ID!
	created_at: NaiveDateTime!
	order_entry: OrderEntry
	provided_by_event: Event
	ticket_type: TicketType!
	updated_at: NaiveDateTime!
	user_con_profile: UserConProfile!
}

enum TicketMode {
	"""
	Tickets are neither sold nor required in this convention
	"""
	disabled
	"""
	A valid ticket is required to sign up for events in this convention
	"""
	required_for_signup
	"""
	Each event in this convention sells tickets separately
	"""
	ticket_per_event
}

type TicketType {
	id: ID!
	description: String
	maximum_event_provided_tickets(eventId: ID): Int!
	name: String!
	providing_products: [Product!]!
}

type TimespanWithMoneyValue {
	finish: DateTime
	start: DateTime
	value: Money
}

type TimespanWithValue {
	finish: DateTime
	start: DateTime
	value: String
}

enum TimezoneMode {
	"""
	Display dates and times using convention’s local time zone
	"""
	convention_local
	"""
	Display dates and times using user’s local time zone
	"""
	user_local
}

type User {
	id: ID!
	email: String!
	first_name: String!
	last_name: String!
	name: String!
	name_inverted: String!
}

type UserConProfile {
	id: ID!
	ability: Ability!
	accepted_clickwrap_agreement: Boolean!
	address: String
	bio_html: String
	bio_name: String!
	birth_date: NaiveDate
	city: String
	convention: Convention!
	country: String
	current_pending_order: Order
	email: String!
	first_name: String!
	gravatar_enabled: Boolean!
	gravatar_url: String!
	ical_secret: String!
	last_name: String!
	mobile_phone: String
	name: String!
	name_inverted: String!
	name_without_nickname: String!
	nickname: String
	order_summary: String!
	signups: [Signup!]!
	site_admin: Boolean!
	staff_positions: [StaffPosition!]!
	state: String
	team_members: [TeamMember!]!
	ticket: Ticket
	user_id: ID!
	zipcode: String
	current_user_form_item_viewer_role: FormItemRole!
	current_user_form_item_writer_role: FormItemRole!
	form_response_attrs_json(itemIdentifiers: [String!]): Json!
	form_response_attrs_json_with_rendered_markdown(itemIdentifiers: [String!]): Json!
}

input UserConProfileFiltersInput {
	id: ID
	attending: Boolean
	email: String
	first_name: String
	is_team_member: Boolean
	last_name: String
	payment_amount: Float
	privileges: String
	name: String
	event_title: [ID!]
	ticket_type: [ID!]
	userId: ID
}

type UserConProfilesPagination {
	current_page: Int!
	entries: [UserConProfile!]!
	per_page: Int!
	total_entries: Int!
	total_pages: Int!
}

schema {
	query: Query
}

