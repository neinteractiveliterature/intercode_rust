//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0
#![allow(clippy::derive_partial_eq_without_eq)]
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "users")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i64,
  pub first_name: String,
  pub last_name: String,
  pub site_admin: Option<bool>,
  pub email: String,
  pub encrypted_password: String,
  pub reset_password_token: Option<String>,
  pub reset_password_sent_at: Option<DateTime>,
  pub remember_created_at: Option<DateTime>,
  pub sign_in_count: Option<i32>,
  pub current_sign_in_at: Option<DateTime>,
  pub last_sign_in_at: Option<DateTime>,
  pub current_sign_in_ip: Option<String>,
  pub last_sign_in_ip: Option<String>,
  pub created_at: Option<DateTime>,
  pub updated_at: Option<DateTime>,
  #[sea_orm(column_type = "Text", nullable)]
  pub legacy_password_md5: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub legacy_password_sha1: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub legacy_password_sha1_salt: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::cms_files::Entity")]
  CmsFiles,
  #[sea_orm(has_many = "super::conventions::Entity")]
  Conventions,
  #[sea_orm(has_many = "super::signup_requests::Entity")]
  SignupRequests,
  #[sea_orm(has_many = "super::runs::Entity")]
  Runs,
  #[sea_orm(has_many = "super::signup_changes::Entity")]
  SignupChanges,
  #[sea_orm(has_many = "super::organization_roles_users::Entity")]
  OrganizationRolesUsers,
  #[sea_orm(has_many = "super::user_activity_alerts::Entity")]
  UserActivityAlerts,
  #[sea_orm(has_many = "super::signups::Entity")]
  Signups,
  #[sea_orm(has_many = "super::user_con_profiles::Entity")]
  UserConProfiles,
}

impl Related<super::cms_files::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::CmsFiles.def()
  }
}

impl Related<super::conventions::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Conventions.def()
  }
}

impl Related<super::signup_requests::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::SignupRequests.def()
  }
}

impl Related<super::runs::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Runs.def()
  }
}

impl Related<super::signup_changes::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::SignupChanges.def()
  }
}

impl Related<super::organization_roles_users::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::OrganizationRolesUsers.def()
  }
}

impl Related<super::user_activity_alerts::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::UserActivityAlerts.def()
  }
}

impl Related<super::signups::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Signups.def()
  }
}

impl Related<super::user_con_profiles::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::UserConProfiles.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
