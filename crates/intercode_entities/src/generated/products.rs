//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "products")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i64,
  pub convention_id: Option<i64>,
  pub available: Option<bool>,
  #[sea_orm(column_type = "Text", nullable)]
  pub name: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub description: Option<String>,
  pub image: Option<String>,
  pub created_at: DateTime,
  pub updated_at: DateTime,
  pub payment_options: Option<Json>,
  pub pricing_structure: Json,
  pub provides_ticket_type_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::ticket_types::Entity",
    from = "Column::ProvidesTicketTypeId",
    to = "super::ticket_types::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  TicketTypes,
  #[sea_orm(
    belongs_to = "super::conventions::Entity",
    from = "Column::ConventionId",
    to = "super::conventions::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Conventions,
  #[sea_orm(has_many = "super::coupons::Entity")]
  Coupons,
  #[sea_orm(has_many = "super::order_entries::Entity")]
  OrderEntries,
  #[sea_orm(has_many = "super::product_variants::Entity")]
  ProductVariants,
}

impl Related<super::ticket_types::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::TicketTypes.def()
  }
}

impl Related<super::conventions::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Conventions.def()
  }
}

impl Related<super::coupons::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Coupons.def()
  }
}

impl Related<super::order_entries::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::OrderEntries.def()
  }
}

impl Related<super::product_variants::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::ProductVariants.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
