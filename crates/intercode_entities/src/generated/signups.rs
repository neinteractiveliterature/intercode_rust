//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0
#![allow(clippy::derive_partial_eq_without_eq)]

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "signups")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i64,
  pub run_id: Option<i64>,
  pub bucket_key: Option<String>,
  pub updated_by_id: Option<i64>,
  pub created_at: DateTime,
  pub updated_at: DateTime,
  pub user_con_profile_id: i64,
  pub state: String,
  pub counted: Option<bool>,
  pub requested_bucket_key: Option<String>,
  pub expires_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::runs::Entity",
    from = "Column::RunId",
    to = "super::runs::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Runs,
  #[sea_orm(
    belongs_to = "super::users::Entity",
    from = "Column::UpdatedById",
    to = "super::users::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Users,
  #[sea_orm(
    belongs_to = "super::user_con_profiles::Entity",
    from = "Column::UserConProfileId",
    to = "super::user_con_profiles::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  UserConProfiles,
  #[sea_orm(has_many = "super::signup_changes::Entity")]
  SignupChanges,
}

impl Related<super::runs::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Runs.def()
  }
}

impl Related<super::users::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Users.def()
  }
}

impl Related<super::user_con_profiles::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::UserConProfiles.def()
  }
}

impl Related<super::signup_changes::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::SignupChanges.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
