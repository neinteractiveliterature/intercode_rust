//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0
#![allow(clippy::derive_partial_eq_without_eq)]

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "assumed_identity_request_logs")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i64,
  pub assumed_identity_session_id: i64,
  #[sea_orm(column_type = "Text")]
  pub controller_name: String,
  #[sea_orm(column_type = "Text")]
  pub action_name: String,
  #[sea_orm(column_type = "Text")]
  pub http_method: String,
  #[sea_orm(column_type = "Text")]
  pub url: String,
  #[sea_orm(column_type = "Custom(\"inet\".to_owned())")]
  pub ip_address: String,
  pub http_headers: Json,
  #[sea_orm(column_type = "Text", nullable)]
  pub http_body: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub graphql_operation_name: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub graphql_document: Option<String>,
  pub graphql_variables: Option<Json>,
  pub created_at: DateTime,
  pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::assumed_identity_sessions::Entity",
    from = "Column::AssumedIdentitySessionId",
    to = "super::assumed_identity_sessions::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  AssumedIdentitySessions,
}

impl Related<super::assumed_identity_sessions::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::AssumedIdentitySessions.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
